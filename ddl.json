// Validacion de datos:

db.createCollection("Hospital", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "nombre",
          "direccion",
          "codigo_habilitacion",
          "tipo_institucion",
          "nivel_complejidad",
        ],
        properties: {
          _id: {
            bsonType: "objectId"
          },
          nombre: {
            bsonType: "string",
            minLength: 1,
            maxLength: 255,
            pattern: "^[a-zA-Z0-9\\s.,'-]*$",
            description: "Debe ser un string no vacío, máximo 255 caracteres, y contener solo caracteres alfanuméricos, espacios, puntos, comas, guiones y apóstrofes."
          },
          direccion: {
            bsonType: "string",
            minLength: 1,
            maxLength: 255,
            pattern: "^[a-zA-Z0-9\\s.,'#-]*$",
            description: "Debe ser un string no vacío, máximo 255 caracteres, y contener solo caracteres alfanuméricos, espacios, puntos, comas, guiones y numerales."
          },
          telefono: {
            bsonType: ["string", "null"],
            pattern: "^\\+?\\d{7,15}$",
            description: "Debe ser un string (si está presente) con un formato de teléfono válido (opcionalmente iniciando con '+', seguido de 7 a 15 dígitos)."
          },
          codigo_habilitacion: {
            bsonType: "string",
            minLength: 1,
            maxLength: 50,
            pattern: "^[A-Z0-9]{5,20}$",
            description: "Debe ser un string no vacío, máximo 50 caracteres, y seguir el formato específico (ej. 5 a 20 caracteres alfanuméricos en mayúscula)."
          },
          tipo_institucion: {
            bsonType: "string",
            enum: ["Público", "Privado", "Mixto"],
            description: "Debe ser un string de la lista predefinida: 'Público', 'Privado' o 'Mixto'."
          },
          nivel_complejidad: {
            bsonType: "string",
            enum: ["Bajo", "Medio", "Alto", "Especializado"],
            description: "Debe ser un string de la lista predefinida: 'Bajo', 'Medio', 'Alto' o 'Especializado'."
          },
        },
      },
    },
    validationLevel: "strict",
    validationAction: "error",
  });




  // Validacion Administrativos
  db.createCollection("Administrativos", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "nombre",
          "telefono",
          "correo",
          "rol",
          "horario",
          "id_tipo_personal"
        ],
        properties: {
          _id: {
            bsonType: "string", // Definimos _id como string para tus IDs personalizados
            description: "identificador único para el administrativo (admXXX)"
          },
          nombre: {
            bsonType: "string",
            description: "nombre completo del personal administrativo"
          },
          telefono: {
            bsonType: "string",
            pattern: "^[0-9]{10}$", // Ejemplo: patrón para 10 dígitos numéricos
            description: "número de teléfono del administrativo"
          },
          correo: {
            bsonType: "string",
            pattern: "^.+@.+\\..+$", // Ejemplo: patrón básico para correo electrónico
            description: "dirección de correo electrónico del administrativo"
          },
          rol: {
            bsonType: "string",
            description: "rol o cargo del administrativo"
          },
          horario: {
            bsonType: "string", // Referencia al ID de horario (ej. 'hor007')
            description: "ID del horario asignado al administrativo"
          },
          id_tipo_personal: {
            bsonType: "string", // Referencia al ID del tipo de personal (ej. 'tipop001')
            description: "ID del tipo de personal administrativo"
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });


  // Validados administrativohospital
  
  db.createCollection("AdministrativoHospital", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "id_administrativo",
          "id_hospital"
        ],
        properties: {
          _id: {
            bsonType: "objectId", // Keep _id as ObjectId for this collection's primary key
            description: "ID único de la relación Administrativo-Hospital."
          },
          id_administrativo: {
            bsonType: "string", // CHANGE HERE: Now it expects a string
            description: "Referencia al ID del administrativo (FK). Debe ser un string."
          },
          id_hospital: {
            bsonType: "string", // CHANGE HERE: Now it expects a string
            description: "Referencia al ID del hospital (FK). Debe ser un string."
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });
  
  // Validacion Medicos

  db.createCollection("Medicos", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "nombre",
          "telefono",
          "correo",
          "rol",
          "horario",
          "id_tipo_personal",
          "id_hospital"
        ],
        properties: {
          _id: {
            bsonType: "string", // Definimos _id como string para tus IDs personalizados (ej. 'med001')
            description: "identificador único para el médico (medXXX)"
          },
          nombre: {
            bsonType: "string",
            description: "nombre completo del médico"
          },
          telefono: {
            bsonType: "string",
            pattern: "^[0-9]{10}$", // Ejemplo: patrón para 10 dígitos numéricos
            description: "número de teléfono del médico"
          },
          correo: {
            bsonType: "string",
            pattern: "^.+@.+\\..+$", // Ejemplo: patrón básico para correo electrónico
            description: "dirección de correo electrónico del médico"
          },
          rol: {
            bsonType: "string",
            description: "rol o especialidad del médico"
          },
          horario: {
            bsonType: "string", // Referencia al ID del horario (ej. 'hor001')
            description: "ID del horario asignado al médico"
          },
          id_tipo_personal: {
            bsonType: "string", // Referencia al ID del tipo de personal (ej. 'tipop002')
            description: "ID del tipo de personal (médico)"
          },
          id_hospital: {
            bsonType: "string", // Referencia al ID del hospital (ej. 'hos001')
            description: "ID del hospital al que pertenece el médico"
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });


  // Validacion Enfermeros
  
  db.createCollection("Enfermeros", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "nombre",
          "telefono",
          "correo",
          "rol",
          "horario",
          "id_tipo_personal",
          "id_hospital"
        ],
        properties: {
          _id: {
            bsonType: "string", // Definimos _id como string para tus IDs personalizados (ej. 'enf001')
            description: "identificador único para el enfermero (enfXXX)"
          },
          nombre: {
            bsonType: "string",
            description: "nombre completo del enfermero"
          },
          telefono: {
            bsonType: "string",
            pattern: "^[0-9]{10}$", // Ejemplo: patrón para 10 dígitos numéricos
            description: "número de teléfono del enfermero"
          },
          correo: {
            bsonType: "string",
            pattern: "^.+@.+\\..+$", // Ejemplo: patrón básico para correo electrónico
            description: "dirección de correo electrónico del enfermero"
          },
          rol: {
            bsonType: "string",
            description: "rol o especialidad del enfermero"
          },
          horario: {
            bsonType: "string", // Referencia al ID del horario (ej. 'hor002')
            description: "ID del horario asignado al enfermero"
          },
          id_tipo_personal: {
            bsonType: "string", // Referencia al ID del tipo de personal (ej. 'tipop003')
            description: "ID del tipo de personal (enfermero)"
          },
          id_hospital: {
            bsonType: "string", // Referencia al ID del hospital (ej. 'hosp001')
            description: "ID del hospital al que pertenece el enfermero"
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });
  


  // Validacion Mantenimiento

 
  db.createCollection("Mantenimiento", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "nombre",
          "correo",
          "telefono",
          "id_servicio_asignado",
          "id_hospital",
          "fecha_ingreso",
          "estado",
          "id_horario",
          "id_tipo_personal"
        ],
        properties: {
          _id: {
            bsonType: "string", // Definimos _id como string para tus IDs personalizados (ej. 'mantPers001')
            description: "identificador único para el personal de mantenimiento (mantPersXXX)"
          },
          nombre: {
            bsonType: "string",
            description: "nombre completo del personal de mantenimiento"
          },
          correo: {
            bsonType: "string",
            pattern: "^.+@.+\\..+$", // Ejemplo: patrón básico para correo electrónico
            description: "dirección de correo electrónico del personal"
          },
          telefono: {
            bsonType: "string",
            pattern: "^[0-9]{10}$", // Ejemplo: patrón para 10 dígitos numéricos
            description: "número de teléfono del personal"
          },
          id_servicio_asignado: {
            bsonType: "string", // Referencia al ID del servicio (ej. 'servm001')
            description: "ID del servicio de mantenimiento asignado"
          },
          id_hospital: {
            bsonType: "string", // Referencia al ID del hospital (ej. 'hos001')
            description: "ID del hospital al que pertenece el personal"
          },
          fecha_ingreso: {
            bsonType: "date", // Fecha de ingreso del personal
            description: "fecha de ingreso del personal a la institución"
          },
          estado: {
            bsonType: "string",
            enum: ["Activo", "Inactivo", "Suspendido"], // Estados permitidos
            description: "estado actual del personal (Activo, Inactivo, Suspendido)"
          },
          id_horario: {
            bsonType: "string", // Referencia al ID del horario (ej. 'hor006')
            description: "ID del horario de trabajo asignado"
          },
          id_tipo_personal: {
            bsonType: "string", // Referencia al ID del tipo de personal (ej. 'tipop004', 'tipop005')
            description: "ID del tipo de personal de mantenimiento"
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });
  

// Validacion Pacientes

db.createCollection("Pacientes", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "nombre",
          "fecha_nacimiento",
          "genero",
          "direccion",
          "telefono",
          "correo",
          "hospital_id",
          "eps_id",      // Changed to _id reference
          "seguro_id"    // Changed to _id reference
        ],
        properties: {
          _id: {
            bsonType: "objectId"
          },
          nombre: {
            bsonType: "string"
          },
          fecha_nacimiento: {
            bsonType: "date"
          },
          genero: {
            bsonType: "string",
            enum: ["Masculino", "Femenino", "Otro"]
          },
          direccion: {
            bsonType: "string"
          },
          telefono: {
            bsonType: "string",
            pattern: "^[0-9]{10}$"
          },
          correo: {
            bsonType: "string",
            pattern: "^.+@.+\\..+$"
          },
          hospital_id: {
            bsonType: "objectId", // Reference to Hospitales _id
            description: "ID del hospital al que el paciente está asociado."
          },
          eps_id: {
            bsonType: "objectId", // Reference to EPS _id
            description: "ID de la Entidad Promotora de Salud (EPS) del paciente."
          },
          seguro_id: {
            bsonType: "objectId", // Reference to Seguros _id (Plan de Salud)
            description: "ID del plan de seguro de salud del paciente."
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });

  // Validacion Visitasmedicas

  db.createCollection("VisitasMedicas", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "fecha_visita",
          "id_tratamiento",
          "id_medico",
          "id_paciente",
          "id_hospital",
          "tipo_visita",
          "estado_visita",
          "observaciones"
        ],
        properties: {
          _id: {
            bsonType: "objectId",
            description: "ID único de la visita médica."
          },
          fecha_visita: {
            bsonType: "date",
            description: "Fecha y hora de la visita médica. Debe ser un tipo Date."
          },
          id_tratamiento: {
            bsonType: "objectId",
            description: "Referencia al ID del tratamiento asociado a esta visita (FK). Debe ser un ObjectId."
          },
          id_medico: {
            bsonType: "objectId",
            description: "Referencia al ID del médico que realizó la visita (FK). Debe ser un ObjectId."
          },
          id_paciente: {
            bsonType: "objectId",
            description: "Referencia al ID del paciente que recibió la visita (FK). Debe ser un ObjectId."
          },
          id_hospital: {
            bsonType: "objectId",
            description: "Referencia al ID del hospital donde se realizó la visita (FK). Debe ser un ObjectId."
          },
          tipo_visita: {
            bsonType: "string",
            enum: ["Consulta General", "Emergencia", "Seguimiento", "Control", "Interconsulta", "Procedimiento"],
            description: "Tipo de visita médica. Debe ser uno de los valores predefinidos."
          },
          estado_visita: {
            bsonType: "string",
            enum: ["Programada", "Realizada", "Cancelada", "Reprogramada", "Pendiente"],
            description: "Estado actual de la visita médica. Debe ser uno de los valores predefinidos."
          },
          observaciones: {
            bsonType: "string",
            maxLength: 1000,
            description: "Notas u observaciones relevantes de la visita. Debe ser un string, máximo 1000 caracteres."
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });


// Validacion Tratamientos

db.createCollection("Tratamientos", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "tratamiento_id",
          "nombre",
          "descripcion",
          "costo",
          "duracion",
          "area_relacionada",
          "via_administracion",
          "FrecuenciaAplicacion"
        ],
        properties: {
          tratamiento_id: {
            bsonType: "string",
            description: "identificador único para el tratamiento y es requerido"
          },
          nombre: {
            bsonType: "string",
            description: "nombre del tratamiento y es requerido"
          },
          descripcion: {
            bsonType: "string",
            description: "descripción del tratamiento y es requerido"
          },
          costo: {
            bsonType: ["double", "int"], // ¡Este es el cambio clave para aceptar ambos tipos!
            description: "costo del tratamiento y es requerido"
          },
          duracion: {
            bsonType: "string",
            description: "duración estimada del tratamiento y es requerido"
          },
          area_relacionada: {
            bsonType: "string",
            description: "ID del área relacionada y es requerido"
          },
          via_administracion: {
            bsonType: "string",
            description: "vía de administración del tratamiento y es requerido"
          },
          FrecuenciaAplicacion: {
            bsonType: "int",
            description: "frecuencia de aplicación del tratamiento y es requerido"
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });
  

  // Validacion Historia Clinica
  db.createCollection("HistoriaClinica", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "paciente",
          "tratamiento"
        ],
        properties: {
          _id: {
            bsonType: "objectId",
            description: "ID único del registro de historia clínica."
          },
          paciente: {
            bsonType: "objectId",
            description: "Referencia al ID del paciente asociado a esta historia clínica (FK). Debe ser un ObjectId."
          },
          tratamiento: {
            bsonType: "objectId",
            description: "Referencia al ID del tratamiento registrado en esta historia clínica (FK). Debe ser un ObjectId."
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });

  // Validacion EPS

  db.createCollection("EPS", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "nombre",
          "nit",
          "tipo",
          "nivel",
          "telefono",
          "correo"
        ],
        properties: {
          _id: {
            bsonType: "objectId"
          },
          nombre: {
            bsonType: "string",
            minLength: 1,
            maxLength: 255
          },
          nit: {
            bsonType: "string",
            minLength: 9,
            maxLength: 15,
            pattern: "^[0-9]{9,15}[-]{0,1}[0-9]$"
          },
          tipo: {
            bsonType: "string",
            enum: ["Contributivo", "Subsidiado"]
          },
          nivel: {
            bsonType: "string",
            enum: ["Nacional", "Departamental", "Municipal"]
          },
          telefono: {
            bsonType: "string",
            minLength: 7,
            maxLength: 15,
            pattern: "^\\+?\\d{7,15}$"
          },
          correo: {
            bsonType: "string",
            pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });

  // Validacion Seguros


  db.createCollection("Seguros", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "nombre",
          "compania",
          "tipo",
          "nivel_cobertura",
          "plan",
          "telefono"
        ],
        properties: {
          _id: {
            bsonType: "objectId"
          },
          nombre: {
            bsonType: "string",
            minLength: 1,
            maxLength: 255
          },
          compania: {
            bsonType: "string",
            minLength: 1,
            maxLength: 255
          },
          tipo: {
            bsonType: "string",
            enum: ["Salud", "Vida", "Accidentes Personales", "Servicios Funerarios"]
          },
          nivel_cobertura: {
            bsonType: "string",
            enum: ["Básico", "Intermedio", "Completo", "Premium"]
          },
          plan: {
            bsonType: "string",
            minLength: 1,
            maxLength: 100
          },
          telefono: {
            bsonType: "string",
            minLength: 7,
            maxLength: 15,
            pattern: "^\\+?\\d{7,15}$"
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });

  // Validacion Enfermedades 

  db.createCollection("Enfermedades", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "nombre",
          "tipo",
          "clasificacion",
          "id_sintoma"
        ],
        properties: {
          _id: {
            bsonType: "objectId"
          },
          nombre: {
            bsonType: "string",
            minLength: 1,
            maxLength: 255
          },
          tipo: {
            bsonType: "string",
            minLength: 1,
            maxLength: 100
          },
          clasificacion: {
            bsonType: "string",
            minLength: 1,
            maxLength: 100
          },
          id_sintoma: {
            bsonType: "objectId"
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });

  // Validacion Sintomas

  db.createCollection("Sintomas", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "descripcion"
        ],
        properties: {
          _id: {
            bsonType: "objectId"
          },
          descripcion: {
            bsonType: "string",
            minLength: 1,
            maxLength: 255
          },
          observaciones: {
            bsonType: "string",
            maxLength: 500
          },
          fecha_encontrada: {
            bsonType: ["date", "null"] 
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });

  // Validacion Beneficios

  db.createCollection("Beneficios", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "descripcion",
          "id_tratamiento"
        ],
        properties: {
          _id: {
            bsonType: "objectId"
          },
          descripcion: {
            bsonType: "string",
            minLength: 1,
            maxLength: 1000
          },
          id_tratamiento: {
            bsonType: "objectId"
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });

  // Validacion Requerimientos

  db.createCollection("Requerimientos", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "descripcion",
          "id_tratamiento"
        ],
        properties: {
          _id: {
            bsonType: "objectId"
          },
          descripcion: {
            bsonType: "string",
            minLength: 1,
            maxLength: 1000
          },
          id_tratamiento: {
            bsonType: "objectId"
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });

  // Validacion Medicamentos
 
  db.createCollection("Medicamentos", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "medicamento_id", // New: custom ID field
          "nombre",
          "principio_activo",
          "concentracion",
          "tipo",
          "lote",
          "disponibilidad",
          "fabricante"
        ],
        properties: {
          _id: {
            bsonType: "objectId" // MongoDB's auto-generated ObjectId
          },
          medicamento_id: {
            bsonType: "string", // Your custom ID (e.g., "med001")
            minLength: 1,
            maxLength: 50
          },
          nombre: {
            bsonType: "string",
            minLength: 1,
            maxLength: 150
          },
          principio_activo: {
            bsonType: "string",
            minLength: 1,
            maxLength: 150
          },
          concentracion: {
            bsonType: "string",
            minLength: 1,
            maxLength: 100
          },
          tipo: {
            bsonType: "string",
            minLength: 1,
            maxLength: 100
          },
          lote: {
            bsonType: "string",
            minLength: 1,
            maxLength: 100
          },
          disponibilidad: {
            bsonType: "bool"
          },
          fabricante: {
            bsonType: "string",
            minLength: 1,
            maxLength: 200
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });

  // Validacion Presentacion 

  db.createCollection("Presentaciones", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "tipo_presentacion",
          "id_medicamento"
        ],
        properties: {
          _id: {
            bsonType: "objectId" // MongoDB will auto-generate this
          },
          tipo_presentacion: {
            bsonType: "string",
            minLength: 1,
            maxLength: 100
          },
          id_medicamento: {
            bsonType: "string", // Changed to string to match medicamento_id
            description: "Referencia al campo 'medicamento_id' del medicamento en la colección Medicamentos."
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });

  // Validacion Inventrio 

  Inventario {
    db.createCollection("Inventario", {
        validator: {
          $jsonSchema: {
            bsonType: "object",
            required: [
              "id_hospital",
              "id_medicamento",
              "stock",
              "fecha_ultima_actualizacion"
            ],
            properties: {
              _id: {
                bsonType: "objectId"
              },
              id_hospital: {
                bsonType: "objectId",
                description: "Reference to the ID of the hospital where the inventory is located (FK)."
              },
              id_medicamento: {
                bsonType: "objectId",
                description: "Reference to the ID of the medicine in this inventory record (FK)."
              },
              stock: {
                bsonType: "int",
                minimum: 0,
                description: "Current stock quantity of the medicine. Must be an integer greater than or equal to 0."
              },
              fecha_ultima_actualizacion: {
                bsonType: "date",
                description: "Date of the last inventory update. Must be a Date type."
              }
            }
          }
        },
        validationLevel: "strict",
        validationAction: "error"
      });

// Validacion Proovedores

db.createCollection("Proveedores", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "proveedor_id",
          "nombre_empresa",
          "nit",
          "tipo",
          "fecha",
          "terminos_pago"
        ],
        properties: {
          _id: {
            bsonType: "objectId" // MongoDB will auto-generate this
          },
          proveedor_id: {
            bsonType: "string", // Your custom ID (e.g., "prov001")
            minLength: 1,
            maxLength: 50
          },
          nombre_empresa: {
            bsonType: "string",
            minLength: 1,
            maxLength: 200
          },
          nit: {
            bsonType: "string", // NITs can contain non-numeric characters, so string is best
            minLength: 5,
            maxLength: 20
          },
          tipo: {
            bsonType: "string",
            minLength: 1,
            maxLength: 100
          },
          fecha: {
            bsonType: "date", // Stores as an ISODate object
            description: "Fecha de inicio de relación con el proveedor"
          },
          terminos_pago: {
            bsonType: "string",
            minLength: 1,
            maxLength: 100
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });

// Validacion Servicio mantenimiento

  db.createCollection("ServiciosMantenimiento", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "tipo_ambiente",
          "nombre_servicio"
        ],
        properties: {
          _id: {
            bsonType: "objectId"
          },
          tipo_ambiente: {
            bsonType: "string",
            // La lista 'enum' ahora incluye todos los valores que has proporcionado
            enum: [
              "Áreas Comunes",
              "Quirófanos",
              "UCI",
              "Habitaciones",
              "Laboratorios",
              "Oficinas",
              "Exteriores",
              "Servicios Generales",
              "Administrativo",
              "Talleres"
            ]
          },
          nombre_servicio: {
            bsonType: "string",
            minLength: 1,
            maxLength: 255
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });
 
  // Validacion Horario

  db.createCollection("Horario", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "horario_tipo",
          "dias"
        ],
        properties: {
          _id: {
            bsonType: "objectId"
          },
          horario_tipo: {
            bsonType: "string",
            minLength: 1,
            maxLength: 100,
            // La lista 'enum' ahora incluye todos los valores necesarios
            enum: [
              "Jornada Completa",
              "Medio Tiempo",
              "Turno Mañana",
              "Turno Tarde",
              "Turno Noche",
              "Fines de Semana",
              "Flexible",
              "Consulta Externa - Diurno",
              "Urgencias - 24/7",
              "Visitas - Mañana",
              "Visitas - Tarde/Noche",
              "Laboratorio Clínico - Mañana",
              "Laboratorio Clínico - Tarde",
              "Imagenología/Administrativo - Diurno",
              "Rotativo - Personal",
              "Nocturno - Personal",
              "Fin de Semana - Personal"
            ]
          },
          dias: {
            bsonType: "string",
            minLength: 1,
            maxLength: 255
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });

  // Validacion Tipospersonal

  db.createCollection("TiposPersonal", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "codigo",
          "nombre",
          "descripcion",
          "salario_base"
        ],
        properties: {
          _id: {
            bsonType: "objectId"
          },
          codigo: {
            bsonType: "string",
            minLength: 1,
            maxLength: 50
          },
          nombre: {
            bsonType: "string",
            minLength: 1,
            maxLength: 100
          },
          descripcion: {
            bsonType: "string",
            maxLength: 500
          },
          salario_base: {
            bsonType: ["double", "decimal"],
            minimum: 0
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });


  // Validacion Areas

  db.createCollection("Areas", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "area_id",
          "tipo_area",
          "descripcion",
          "estado",
          "id_hospital"
        ],
        properties: {
          _id: {
            bsonType: "objectId" // MongoDB will auto-generate this
          },
          area_id: {
            bsonType: "string", // Your custom ID (e.g., "area001")
            minLength: 1,
            maxLength: 50
          },
          tipo_area: {
            bsonType: "string",
            enum: ["Asistencial", "Apoyo", "Quirúrgico y Obstétrico", "Hospitalización", "General"], // Enforce specific types of areas
            description: "Tipo de área funcional del hospital"
          },
          descripcion: {
            bsonType: "string",
            minLength: 1,
            maxLength: 255
          },
          estado: {
            bsonType: "string",
            enum: ["Activo", "Inactivo", "Mantenimiento"], // Possible states for an area
            description: "Estado actual del área"
          },
          id_hospital: {
            bsonType: "string", // References the 'hospital_id' string in the Hospitales collection
            description: "Referencia al campo 'hospital_id' del hospital al que pertenece el área."
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });

  // Validacion AreaEspecializacion 

  db.createCollection("AreaEspecializacion", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "id_area",
          "fecha_asignacion",
          "id_hospital",
          "estado"
        ],
        properties: {
          _id: {
            bsonType: "objectId"
          },
          id_area: {
            bsonType: "objectId",
            description: "Referencia al ID del área (FK). Debe ser un ObjectId."
          },
          fecha_asignacion: {
            bsonType: "date",
            description: "Fecha en la que se asignó la especialización o el personal al área. Debe ser un tipo Date."
          },
          id_hospital: {
            bsonType: "objectId",
            description: "Referencia al ID del hospital al que pertenece esta área de especialización (FK). Debe ser un ObjectId."
          },
          estado: {
            bsonType: "string",
            enum: ["Activa", "Inactiva", "En Mantenimiento", "Pendiente de Activación"],
            description: "Estado actual de la especialización o asignación del área. Debe ser uno de los valores predefinidos."
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });

  // Validacion Subareas

  db.createCollection("Subareas", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "nombre_subarea",
          "id_area",
          "descripcion",
          "estado",
          "tipo"
        ],
        properties: {
          _id: {
            bsonType: "objectId"
          },
          nombre_subarea: {
            bsonType: "string",
            minLength: 1,
            maxLength: 100
          },
          id_area: {
            bsonType: "objectId"
          },
          descripcion: {
            bsonType: "string",
            maxLength: 500
          },
          estado: {
            bsonType: "string",
            enum: ["Activa", "Inactiva", "En Mantenimiento", "Cerrada Temporalmente"]
          },
          tipo: {
            bsonType: "string",
            enum: ["Consultorio", "Sala de Espera", "Recepción", "Farmacia", "Laboratorio Clínico", "Sala de Rayos X", "Oficina", "Depósito", "Sala de Recuperación"]
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });

  // Validacion Subareas

  db.createCollection("Subareas", {
    ...   validator: {
    ...     $jsonSchema: {
    ...       bsonType: "object",
    ...       required: [
    ...         "id_area",
    ...         "nombre_subarea",
    ...         "descripcion"
    ...       ],
    ...       properties: {
    ...         _id: {
    ...           bsonType: "objectId",
    ...           description: "ID único de la subárea."
    ...         },
    ...         id_area: {
    ...           bsonType: "objectId",
    ...           description: "Referencia al ID del área a la que pertenece esta subárea (FK). Debe ser un ObjectId."
    ...         },
    ...         nombre_subarea: {
    ...           bsonType: "string",
    ...           description: "Nombre de la subárea. Debe ser un string."
    ...         },
    ...         descripcion: {
    ...           bsonType: "string",
    ...           maxLength: 500,
    ...           description: "Descripción detallada de la subárea. Debe ser un string, máximo 500 caracteres."
    ...         }
    ...       }
    ...     }
    ...   },
    ...   validationLevel: "strict",
    ...   validationAction: "error"
    ... });

    // Validacion Inventario

    db.createCollection("Inventario", {
        validator: {
          $jsonSchema: {
            bsonType: "object",
            required: [
              "id_hospital",
              "id_medicamento",
              "stock",
              "fecha_ultima_actualizacion"
            ],
            properties: {
              _id: {
                bsonType: "objectId",
                description: "ID único del registro de inventario."
              },
              id_hospital: {
                bsonType: "objectId",
                description: "Referencia al ID del hospital donde se encuentra el inventario (FK). Debe ser un ObjectId."
              },
              id_medicamento: {
                bsonType: "objectId",
                description: "Referencia al ID del medicamento en el inventario (FK). Debe ser un ObjectId."
              },
              stock: {
                bsonType: "int",
                minimum: 0,
                description: "Cantidad actual del medicamento en stock. Debe ser un entero no negativo."
              },
              fecha_ultima_actualizacion: {
                bsonType: "date",
                description: "Fecha y hora de la última actualización del stock. Debe ser un tipo Date."
              }
            }
          }
        },
        validationLevel: "strict",
        validationAction: "error"
      });

      

// Validacion Historia Clinica

db.createCollection("HistoriaClinica", {
    validator: {
      $jsonSchema: {
        bsonType: "object",
        required: [
          "paciente",
          "tratamiento"
        ],
        properties: {
          _id: {
            bsonType: "objectId",
            description: "ID único de la historia clínica."
          },
          paciente: {
            bsonType: "objectId",
            description: "Referencia al ID del paciente asociado a esta historia clínica (FK). Debe ser un ObjectId."
          },
          tratamiento: {
            bsonType: "objectId",
            description: "Referencia al ID del tratamiento asociado a esta historia clínica (FK). Debe ser un ObjectId."
          }
        }
      }
    },
    validationLevel: "strict",
    validationAction: "error"
  });
